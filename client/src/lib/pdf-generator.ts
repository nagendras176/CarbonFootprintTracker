import jsPDF from "jspdf";
import type { SurveyTemplate, SurveyResponse } from "@shared/schema";

interface PDFData {
  template: SurveyTemplate;
  householdInfo: {
    id: string;
    address: string;
    occupants: number;
    area: number;
  };
  responses: SurveyResponse[];
  totalCarbonFootprint: number;
}

export async function generatePDF(data: PDFData) {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Helper function to add text with automatic line wrapping
  const addText = (text: string, x: number, y: number, maxWidth?: number) => {
    if (maxWidth) {
      const lines = pdf.splitTextToSize(text, maxWidth);
      pdf.text(lines, x, y);
      return y + (lines.length * 7);
    } else {
      pdf.text(text, x, y);
      return y + 7;
    }
  };

  // Header
  pdf.setFontSize(20);
  pdf.setFont("helvetica", "bold");
  yPosition = addText("Carbon Footprint Survey Report", 20, yPosition);
  
  yPosition += 10;
  
  // Survey Information
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  yPosition = addText("Survey Information", 20, yPosition);
  
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  yPosition += 5;
  yPosition = addText(`Template: ${data.template.name}`, 20, yPosition);
  yPosition = addText(`Survey Code: ${data.template.code}`, 20, yPosition);
  yPosition = addText(`Generated: ${new Date().toLocaleString()}`, 20, yPosition);
  
  yPosition += 10;
  
  // Household Information
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  yPosition = addText("Household Information", 20, yPosition);
  
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  yPosition += 5;
  yPosition = addText(`Household ID: ${data.householdInfo.id}`, 20, yPosition);
  yPosition = addText(`Address: ${data.householdInfo.address}`, 20, yPosition, pageWidth - 40);
  yPosition = addText(`Occupants: ${data.householdInfo.occupants}`, 20, yPosition);
  yPosition = addText(`Area: ${data.householdInfo.area} sq ft`, 20, yPosition);
  
  yPosition += 15;
  
  // Survey Responses
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  yPosition = addText("Survey Responses", 20, yPosition);
  
  yPosition += 5;
  
  // Table header
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "bold");
  pdf.text("Question", 20, yPosition);
  pdf.text("Value", 120, yPosition);
  pdf.text("CO₂ (kg)", 160, yPosition);
  yPosition += 7;
  
  // Draw line under header
  pdf.line(20, yPosition - 2, pageWidth - 20, yPosition - 2);
  yPosition += 5;
  
  // Survey responses
  pdf.setFont("helvetica", "normal");
  const questions = data.template.questions as any[];
  
  data.responses.forEach((response) => {
    const question = questions.find(q => q.id === response.questionId);
    if (question) {
      // Check if we need a new page
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
      }
      
      const questionText = pdf.splitTextToSize(question.text, 90);
      pdf.text(questionText, 20, yPosition);
      pdf.text(`${response.value} ${question.unit}`, 120, yPosition);
      pdf.text(response.carbonEquivalent.toFixed(2), 160, yPosition);
      
      yPosition += Math.max(questionText.length * 5, 10);
    }
  });
  
  yPosition += 15;
  
  // Total Carbon Footprint
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  
  // Create a box for the total
  const boxY = yPosition;
  pdf.setFillColor(46, 125, 50); // Green color
  pdf.rect(20, boxY - 5, pageWidth - 40, 25, "F");
  
  pdf.setTextColor(255, 255, 255); // White text
  yPosition = addText("Total Carbon Footprint", 30, yPosition + 5);
  
  pdf.setFontSize(20);
  yPosition = addText(`${data.totalCarbonFootprint.toFixed(2)} kg CO₂`, 30, yPosition + 5);
  
  // Reset text color
  pdf.setTextColor(0, 0, 0);
  
  yPosition += 20;
  
  // Carbon Offset Recommendations
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  yPosition = addText("Carbon Offset Recommendations", 20, yPosition);
  
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  yPosition += 5;
  
  const recommendations = [
    "• Consider switching to renewable energy sources",
    "• Improve home insulation to reduce energy consumption", 
    "• Use energy-efficient appliances",
    "• Reduce unnecessary travel and consider public transportation",
    "• Plant trees or support reforestation projects",
    "• Purchase carbon credits from verified projects"
  ];
  
  recommendations.forEach(rec => {
    yPosition = addText(rec, 20, yPosition, pageWidth - 40);
    yPosition += 2;
  });
  
  // Footer
  pdf.setFontSize(8);
  pdf.setFont("helvetica", "italic");
  const footerY = pageHeight - 20;
  pdf.text("This report was generated by the Carbon Survey application", 20, footerY);
  pdf.text(`Report ID: CS-${Date.now()}`, 20, footerY + 5);
  
  // Generate filename
  const filename = `carbon_survey_${data.householdInfo.id}_${new Date().toISOString().split('T')[0]}.pdf`;
  
  // Download the PDF
  pdf.save(filename);
}
